pipeline {
  agent any

  triggers {
    githubPush()  // Trigger Jenkins on GitHub push
  }

  parameters {
    string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag')
  }

  environment {
    DOCKER_HUB_REPO = 'lavanyaboya/cap-speakease'
    ECR_REPO = '636768524979.dkr.ecr.eu-central-2.amazonaws.com/lavanya-jenkins-repo'
    AWS_REGION = 'eu-central-2'
    CLUSTER_NAME = 'lavanya-test-cluster'
    BRANCH_NAME = 'main'
  }

  stages {
    stage('Checkout Code') {
      steps {
        script {
          git branch: "${BRANCH_NAME}", url: 'https://github.com/boyalavanya26/sample_try.git'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${DOCKER_HUB_REPO}:${params.IMAGE_TAG} ."
      }
    }

    stage('Login to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'Docker_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        sh "docker push ${DOCKER_HUB_REPO}:${params.IMAGE_TAG}"
      }
    }

    stage('Login to AWS ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials']]) {
          sh '''
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $ECR_REPO
          '''
        }
      }
    }

    stage('Tag and Push to ECR') {
      steps {
        script {
          def ecrImage = "${env.ECR_REPO}:${params.IMAGE_TAG}"
          sh """
            docker tag ${DOCKER_HUB_REPO}:${params.IMAGE_TAG} ${ecrImage}
            docker push ${ecrImage}
          """
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials']]) {
          script {
            def deploymentYaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speakease-backend
  labels:
    app: speakease
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speakease
  template:
    metadata:
      labels:
        app: speakease
    spec:
      initContainers:
      - name: wait-for-mongo
        image: busybox
        command: ['sh', '-c', 'until nc -z speakease-mongo 27017; do echo waiting for MongoDB; sleep 5; done;']
      containers:
      - name: speakease-backend
        image: ${ECR_REPO}:${params.IMAGE_TAG}
        ports:
        - containerPort: 3000
        env:
        - name: PORT
          value: "3000"
        - name: MONGODB_AUTH_URI
          value: "mongodb://speakease-mongo:27017/authdb"
        - name: MONGODB_FEEDBACK_URI
          value: "mongodb://speakease-mongo:27017/feedbackDB"
---
apiVersion: v1
kind: Service
metadata:
  name: speakease-backend-service
spec:
  selector:
    app: speakease
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speakease-frontend
  labels:
    app: speakease-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speakease-frontend
  template:
    metadata:
      labels:
        app: speakease-frontend
    spec:
      containers:
      - name: speakease-frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: speakease-frontend-service
spec:
  selector:
    app: speakease-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speakease-mongo
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:6.0
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
      volumes:
      - name: mongo-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: speakease-mongo
spec:
  selector:
    app: mongo
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
  type: ClusterIP
"""
            writeFile file: 'kube-deploy.yaml', text: deploymentYaml
            sh """
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME}
              kubectl apply -f kube-deploy.yaml
            """
          }
        }
      }
    }

    stage('MongoDB Automation') {
      steps {
        script {
          sh '''
          kubectl run mongo-client --rm -i --image=mongo -- \
          mongosh "mongodb://speakease-mongo:27017" --eval 'db.getSiblingDB("authdb").users.find().limit(5).pretty()'
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Deployment and MongoDB automation successful!"
    }
    failure {
      echo "❌ Deployment failed.Check logs for more details."
    }
  }
}